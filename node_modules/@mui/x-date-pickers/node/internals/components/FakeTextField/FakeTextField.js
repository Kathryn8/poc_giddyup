"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeTextField = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _Stack = _interopRequireDefault(require("@mui/material/Stack"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["before", "after"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const FakeTextField = exports.FakeTextField = /*#__PURE__*/React.forwardRef(function FakeTextField(props, ref) {
  const {
    elements
  } = props;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Stack.default, {
    direction: "row",
    spacing: 1,
    ref: ref,
    children: elements.map((_ref, elementIndex) => {
      let {
          before,
          after
        } = _ref,
        otherElementProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
        children: [before, /*#__PURE__*/(0, _jsxRuntime.jsx)("input", (0, _extends2.default)({}, otherElementProps)), after]
      }, elementIndex);
    })
  });
});